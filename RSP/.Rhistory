tidyr::fill(x, y, .direction = "up") %>%
ungroup()
summary(aux$alpha)
summary(as.factor(aux$alpha))
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
head(Z)
class(Z)
aux2 <- as_tibble(detections)
View(aux2)
head(aux2)
head(Z)
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
detections <-
tidyr::as_tibble(detections) %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
tidyr::as_tibble(detections) %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
View(detections)
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
head(detections)
head(Z)
summary(Z)
View(detections)
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
View(detections)
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Transmitter, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
View(detections)
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Transmitter, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude) %>%
dplyr::ungroup()
View(detections)
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
p <- ggplot2::ggplot()
# draw the base map
p <- p + ggplot2::geom_raster(data = df, ggplot2::aes(y = Latitude, x = Longitude), fill = land.col, show.legend = FALSE)
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = interaction(Signal_Track, Group), alpha = alpha), size = 1)
p <- p + ggplot2::facet_wrap(~ Group)
p <- p + ggplot2::scale_alpha_identity()
dev.off()
dev.off()
p
dev.off()
p <- p + ggplot2::theme_bw()
if (add.legend) {
p <- p + ggplot2::theme(legend.position = "bottom")
} else {
p <- p + ggplot2::theme(legend.position = "none")
}
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
if (is.null(title)) {
p <- p + ggplot2::labs(title = "{frame_time}")
} else {
p <- p + ggplot2::labs(title = title)
}
if (!is.null(xlim) & !is.null(ylim)) {
p <- p + ggplot2::coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE)
}
p + gganimate::transition_time(Timestamp)
start.time = "2014-07-01 00:00:00"
start.time = "2014-07-01 00:00:00"
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
summary(detections$Timestamp)
start.time = "2014-09-01 00:00:00"
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
summary(detections$Timestamp)
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
unique(detections$Group)
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections <- detections[-which(is.na(detections$Latitude)), ]
summary(as.factor(detections$alpha))
p <- ggplot2::ggplot()
# draw the base map
p <- p + ggplot2::geom_raster(data = df, ggplot2::aes(y = Latitude, x = Longitude), fill = land.col, show.legend = FALSE)
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = interaction(Signal_Track, Group), alpha = alpha), size = 1)
p <- p + ggplot2::facet_wrap(~ Group)
p <- p + ggplot2::scale_alpha_identity()
p
dev.off()
p <- p + ggplot2::theme_bw()
if (add.legend) {
p <- p + ggplot2::theme(legend.position = "bottom")
} else {
p <- p + ggplot2::theme(legend.position = "none")
}
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
if (is.null(title)) {
p <- p + ggplot2::labs(title = "{frame_time}")
} else {
p <- p + ggplot2::labs(title = title)
}
if (!is.null(xlim) & !is.null(ylim)) {
p <- p + ggplot2::coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE)
}
p + gganimate::transition_time(Timestamp)
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
#=================================#
# 1. Prepare the data using actel #
#=================================#
# Process acoustic data
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
spatial <- loadSpatial()
head(spatial)
# Import river shapefile
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
# Create a transition layer with 8 directions (the default is 16)
tl <- transitionLayer(water, directions = 8)
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
animateTracks <- function(input, base.raster, tags = NULL, by.group = FALSE, start.time, stop.time, land.col = "#BABCBF80",
title = NULL, add.legend = TRUE, add.stations = FALSE, save.gif = FALSE, gif.name = "Animation.gif", height = 720, width = 720,
xlim = NULL, ylim = NULL, nframes = 100, fps = 10) {
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
# Convert base raster for plotting
base.raster[is.na(base.raster)] <- 2
base.raster[base.raster == 1] <- NA
base.raster[base.raster == 2] <- 1
base.raster_df <- raster::rasterToPoints(base.raster)
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 0] <- NA
# start plotting
p <- ggplot2::ggplot()
# draw the base map
p <- p + ggplot2::geom_raster(data = df, ggplot2::aes(y = Latitude, x = Longitude), fill = land.col, show.legend = FALSE)
# Plot locations
if (by.group) {
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections <- detections[-which(is.na(detections$Latitude)), ]
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = interaction(Signal_Track, Group), alpha = alpha), size = 1)
p <- p + ggplot2::facet_wrap(~ Group)
p <- p + ggplot2::scale_alpha_identity()
} else {
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = Signal_Track), size = 1)
# Add stations
if (add.stations)
p <- p + addStations(input)
}
# Graphic details
p <- p + ggplot2::theme_bw()
if (add.legend) {
p <- p + ggplot2::theme(legend.position = "bottom")
} else {
p <- p + ggplot2::theme(legend.position = "none")
}
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
if (is.null(title)) {
p <- p + ggplot2::labs(title = "{frame_time}")
} else {
p <- p + ggplot2::labs(title = title)
}
if (!is.null(xlim) & !is.null(ylim)) {
p <- p + ggplot2::coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE)
}
# Animate:
p <- p + gganimate::transition_time(Timestamp)
p <- p + gganimate::shadow_wake(wake_length = 0.2, alpha = TRUE)
if (save.gif == "TRUE") {
return(gganimate::anim_save(filename = gif.name,
animation = gganimate::animate(p, height = height, width = width, nframes = nframes, fps = fps)))
} else {
return(p)
}
}
animateTracks(input = rsp.data, base.raster = water, start.time = "2014-09-01 00:00:00", stop.time = "2015-01-01 00:00:00",
by.group = TRUE, add.legend = FALSE, save.gif = TRUE, gif.name = "Animation_total.gif", width = 720, height = 360, nframes = 200)
?tidyverse::%>%
library(magrittr)
animateTracks <- function(input, base.raster, tags = NULL, by.group = FALSE, start.time, stop.time, land.col = "#BABCBF80",
title = NULL, add.legend = TRUE, add.stations = FALSE, save.gif = FALSE, gif.name = "Animation.gif", height = 720, width = 720,
xlim = NULL, ylim = NULL, nframes = 100, fps = 10) {
detections <- do.call(rbind.data.frame, input$detections)
# Subset the data for tags of interest: if provided
if (!is.null(tags))
detections <- detections[which(detections$Transmitter %in% tags), ]
# Crop data for the period of interest:
detections <- detections[which(detections$Timestamp >= as.POSIXct(start.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone")) &
detections$Timestamp <= as.POSIXct(stop.time, format = "%Y-%m-%d %H:%M:%S", tz = attr(detections$Timestamp, "tzone"))), ]
detections$Signal_Track <- paste(detections$Signal, detections$Track, sep = "_")
# Check track quality: remove single-station tracks
tracks <- unique(detections$Signal_Track)
track.save <- NULL
for (i in 1:length(tracks)) {
aux <- detections[which(detections$Signal_Track == tracks[i]), ]
if (length(unique(aux$Latitude)) == 1)
track.save <- c(track.save, tracks[i])
}
if (length(track.save) > 0)
detections <- detections[-which(detections$Signal_Track %in% track.save), ]
# Convert base raster for plotting
base.raster[is.na(base.raster)] <- 2
base.raster[base.raster == 1] <- NA
base.raster[base.raster == 2] <- 1
base.raster_df <- raster::rasterToPoints(base.raster)
df <- data.frame(base.raster_df)
colnames(df) <- c("Longitude", "Latitude", "MAP")
df$MAP[df$MAP == 0] <- NA
# start plotting
p <- ggplot2::ggplot()
# draw the base map
p <- p + ggplot2::geom_raster(data = df, ggplot2::aes(y = Latitude, x = Longitude), fill = land.col, show.legend = FALSE)
# Plot locations
if (by.group) {
detections$Group <- input$bio$Group[match(detections$Transmitter, input$bio$Transmitter)]
detections <-
detections %>%
plyr::mutate(alpha = 1) %>%
tidyr::complete(Timestamp, Group, Transmitter, Signal_Track, fill = list(alpha = 0)) %>%
dplyr::group_by(Group, Signal_Track) %>%
plyr::arrange(Timestamp) %>%
tidyr::fill(Longitude, Latitude, .direction = "up") %>%
dplyr::ungroup()
detections <- detections[-which(is.na(detections$Latitude)), ]
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = interaction(Signal_Track, Group), alpha = alpha), size = 1)
p <- p + ggplot2::facet_wrap(~ Group)
p <- p + ggplot2::scale_alpha_identity()
} else {
p <- p + ggplot2::geom_point(data = detections, ggplot2::aes(x = Longitude, y = Latitude, colour = Transmitter, group = Signal_Track), size = 1)
# Add stations
if (add.stations)
p <- p + addStations(input)
}
# Graphic details
p <- p + ggplot2::theme_bw()
if (add.legend) {
p <- p + ggplot2::theme(legend.position = "bottom")
} else {
p <- p + ggplot2::theme(legend.position = "none")
}
p <- p + ggplot2::scale_x_continuous(expand = c(0, 0))
p <- p + ggplot2::scale_y_continuous(expand = c(0, 0))
if (is.null(title)) {
p <- p + ggplot2::labs(title = "{frame_time}")
} else {
p <- p + ggplot2::labs(title = title)
}
if (!is.null(xlim) & !is.null(ylim)) {
p <- p + ggplot2::coord_cartesian(xlim = xlim, ylim = ylim, expand = FALSE)
}
# Animate:
p <- p + gganimate::transition_time(Timestamp)
p <- p + gganimate::shadow_wake(wake_length = 0.2, alpha = TRUE)
if (save.gif == "TRUE") {
return(gganimate::anim_save(filename = gif.name,
animation = gganimate::animate(p, height = height, width = width, nframes = nframes, fps = fps)))
} else {
return(p)
}
}
animateTracks(input = rsp.data, base.raster = water, start.time = "2014-09-01 00:00:00", stop.time = "2015-01-01 00:00:00",
by.group = TRUE, add.legend = FALSE, save.gif = TRUE, gif.name = "Animation_total.gif", width = 720, height = 360, nframes = 200)
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
#=================================#
# 1. Prepare the data using actel #
#=================================#
# Process acoustic data
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
spatial <- loadSpatial()
head(spatial)
# Import river shapefile
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
animateTracks(input = rsp.data, base.raster = water, start.time = "2014-09-01 00:00:00", stop.time = "2015-01-01 00:00:00",
by.group = TRUE, add.legend = FALSE, save.gif = TRUE, gif.name = "Animation_total.gif", width = 720, height = 360, nframes = 200)
install.packages("usethis")
?usethis::use_pipe
