for (i in 1:length(groups)) {
aux.areas <- areas$areas[[which(names(areas$areas) == groups[i])]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == groups[i])]]
slots.aux <- unique(aux.areas$Slot)
lat.save <- NULL
lon.save <- NULL
suppressWarnings(for (ii in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[ii])]]
for (iii in 1:length(names(aux))) {
slots.save <- c(slots.save, slots.aux[ii])
groups.save <- c(groups.save, groups[i])
track.save <- c(track.save, names(aux)[iii])
aux.file <- aux[[iii]][[which(names(aux[[iii]]) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux.file, which(aux.file[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
}
})
}
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save)
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save)
View(aux.centroid)
areas$areas
areas = areas.track
length(names(aux))
i
ii
iii
i<-2
ii<-1
iii<-1
groups <- names(areas$areas)
slots <- input$timeslots$slot
groups.save <- NULL
track.save <- NULL
slots.save <- NULL
lat.save <- NULL
lon.save <- NULL
for (i in 1:length(groups)) {
aux.areas <- areas$areas[[which(names(areas$areas) == groups[i])]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == groups[i])]]
slots.aux <- unique(aux.areas$Slot)
for (ii in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[ii])]]
suppressWarnings(for (iii in 1:length(names(aux))) {
slots.save <- c(slots.save, slots.aux[ii])
groups.save <- c(groups.save, groups[i])
track.save <- c(track.save, names(aux)[iii])
aux.file <- aux[[iii]][[which(names(aux[[iii]]) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux.file, which(aux.file[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
})
}
}
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save)
View(aux.centroid)
getCentroids <- function(input, areas, type, level, group, UTM) {
if (type == "group") {
if (length(which(colnames(areas$areas[[1]]) == paste0("area.", stringr::str_remove(level, pattern = "0.")))) == 0)
stop("The level specified was not found in the input object.", call. = FALSE)
if (length(which(names(areas$areas) == group)) == 0)
stop("The group specified was not found in the areas object.", call. = FALSE)
slots <- input$timeslots$slot
aux.areas <- areas$areas[[which(names(areas$areas) == group)]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == group)]]
slots.aux <- aux.areas$Slot
lat.save <- NULL
lon.save <- NULL
suppressWarnings(for (i in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[i])]]
aux <- aux[[which(names(aux) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux, which(aux[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
})
aux.centroid <- data.frame(slots = slots.aux, lat = lat.save, lon = lon.save)
df.centroid <- input$timeslots
df.centroid$Group <- group
df.centroid$Level <- paste0(level * 100, "%")
df.centroid$Centroid.lat <- aux.centroid$lat[match(df.centroid$slot, aux.centroid$slots)]
df.centroid$Centroid.lon <- aux.centroid$lon[match(df.centroid$slot, aux.centroid$slots)]
return(df.centroid)
}
if (type == "track") {
if (length(which(colnames(areas$areas[[1]]) == paste0("area.", stringr::str_remove(level, pattern = "0.")))) == 0)
stop("The level specified was not found in the input object.", call. = FALSE)
groups <- names(areas$areas)
slots <- input$timeslots$slot
groups.save <- NULL
track.save <- NULL
slots.save <- NULL
lat.save <- NULL
lon.save <- NULL
for (i in 1:length(groups)) {
aux.areas <- areas$areas[[which(names(areas$areas) == groups[i])]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == groups[i])]]
slots.aux <- unique(aux.areas$Slot)
for (ii in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[ii])]]
suppressWarnings(for (iii in 1:length(names(aux))) {
slots.save <- c(slots.save, slots.aux[ii])
groups.save <- c(groups.save, groups[i])
track.save <- c(track.save, names(aux)[iii])
aux.file <- aux[[iii]][[which(names(aux[[iii]]) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux.file, which(aux.file[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
})
}
}
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save)
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid <- aux.centroid[, c(3, 6, 7, 1, 2, 4, 5)]
return(aux.centroid)
}
}
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B
areas.track <- getAreas(dbbmm.daily, type = "track")
df.centroid.track <- getCentroids(input = dbbmm.daily, areas = areas.track, type = "track", level = 0.5, UTM = 56)
df.centroid.track
df.centroid.B
df.centroid.track
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, level = paste0(level * 100, "%"))
aux.centroid
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid
df.centroid.B
aux.centroid <- aux.centroid[, c(3, 6, 7, 1, 2, 6, 4, 5)]
aux.centroid
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, Level = paste0(level * 100, "%"))
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid <- aux.centroid[, c(3, 6, 7, 1, 2, 6, 4, 5)]
aux.centroid
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, Level = paste0(level * 100, "%"))
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid <- aux.centroid[, c(3, 7, 1, 2, 6, 4, 5)]
aux.centroid
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, Level = paste0(level * 100, "%"))
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid
df.centroid.B
aux.centroid <- aux.centroid[, c(3, 7, 8, 1, 6, 4, 5)]
aux.centroid
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, Level = paste0(level * 100, "%"))
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid <- aux.centroid[, c(3, 7, 8, 1, 2, 6, 4, 5)]
aux.centroid
getCentroids <- function(input, areas, type, level, group, UTM) {
if (type == "group") {
if (length(which(colnames(areas$areas[[1]]) == paste0("area.", stringr::str_remove(level, pattern = "0.")))) == 0)
stop("The level specified was not found in the input object.", call. = FALSE)
if (length(which(names(areas$areas) == group)) == 0)
stop("The group specified was not found in the areas object.", call. = FALSE)
slots <- input$timeslots$slot
aux.areas <- areas$areas[[which(names(areas$areas) == group)]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == group)]]
slots.aux <- aux.areas$Slot
lat.save <- NULL
lon.save <- NULL
suppressWarnings(for (i in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[i])]]
aux <- aux[[which(names(aux) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux, which(aux[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
})
aux.centroid <- data.frame(slots = slots.aux, lat = lat.save, lon = lon.save)
df.centroid <- input$timeslots
df.centroid$Group <- group
df.centroid$Level <- paste0(level * 100, "%")
df.centroid$Centroid.lat <- aux.centroid$lat[match(df.centroid$slot, aux.centroid$slots)]
df.centroid$Centroid.lon <- aux.centroid$lon[match(df.centroid$slot, aux.centroid$slots)]
return(df.centroid)
}
if (type == "track") {
if (length(which(colnames(areas$areas[[1]]) == paste0("area.", stringr::str_remove(level, pattern = "0.")))) == 0)
stop("The level specified was not found in the input object.", call. = FALSE)
groups <- names(areas$areas)
slots <- input$timeslots$slot
groups.save <- NULL
track.save <- NULL
slots.save <- NULL
lat.save <- NULL
lon.save <- NULL
for (i in 1:length(groups)) {
aux.areas <- areas$areas[[which(names(areas$areas) == groups[i])]]
aux.rasters <- areas$rasters[[which(names(areas$areas) == groups[i])]]
slots.aux <- unique(aux.areas$Slot)
for (ii in 1:length(slots.aux)) {
aux <- aux.rasters[[which(names(aux.rasters) == slots.aux[ii])]]
suppressWarnings(for (iii in 1:length(names(aux))) {
slots.save <- c(slots.save, slots.aux[ii])
groups.save <- c(groups.save, groups[i])
track.save <- c(track.save, names(aux)[iii])
aux.file <- aux[[iii]][[which(names(aux[[iii]]) == as.character(level))]]
aux1 <- colMeans(raster::xyFromCell(aux.file, which(aux.file[] == 1)))
xy <- data.frame(X = aux1[1], Y = aux1[2])
sp::coordinates(xy) <- c("X", "Y")
sp::proj4string(xy) <- sp::CRS(paste0("+proj=utm +zone=", UTM, "+datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
trans.xy <- sp::spTransform(xy, sp::CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
lat.save <- c(lat.save, raster::extent(trans.xy)[3])
lon.save <- c(lon.save, raster::extent(trans.xy)[1])
})
}
}
aux.centroid <- data.frame(Group = groups.save, Track = track.save, slot = slots.save,
Centroid.lat = lat.save, Centroid.lon = lon.save, Level = paste0(level * 100, "%"))
aux.centroid$start <- input$timeslots$start[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid$stop <- input$timeslots$stop[match(aux.centroid$slot, input$timeslots$slot)]
aux.centroid <- aux.centroid[, c(3, 7, 8, 1, 2, 6, 4, 5)]
return(aux.centroid)
}
}
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B
plotAreas(areas.daily, base.raster = water, group = "B", timeslot = 1, title = "Group B (2014-11-01)") +
addCentroids(input = df.centroid.B, timeslot = 1)
df.centroid.track <- getCentroids(input = dbbmm.daily, areas = areas.track, type = "track", level = 0.5, UTM = 56)
df.centroid.track
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
#=================================#
# 1. Prepare the data using actel #
#=================================#
# Process acoustic data
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
spatial <- loadSpatial()
head(spatial)
# Import river shapefile
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
# Create a transition layer with 8 directions (the default is 16)
tl <- transitionLayer(water, directions = 8)
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
rsp.data$bio # Biometrics file
distance.data <- getDistances(rsp.data)
plotDistances(distance.data, group = "A")
plotDistances(distance.data, group = "B", compare = FALSE)
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
#=================================#
# 1. Prepare the data using actel #
#=================================#
# Process acoustic data
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
spatial <- loadSpatial()
head(spatial)
# Import river shapefile
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
# Create a transition layer with 8 directions (the default is 16)
tl <- transitionLayer(water, directions = 8)
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
rsp.data$bio # Biometrics file
distance.data <- getDistances(rsp.data)
plotDistances(distance.data, group = "A")
plotDistances(distance.data, group = "B", compare = FALSE)
names(rsp.data)
plotDistances(distance.data, group = "A")
plotDistances(distance.data, group = "B", compare = FALSE) # Only RSP distances!
names(rsp.data)
rsp.data$track$`A69-9004-481` # Some tracks were INVALID!
rsp.data$track$`A69-9004-489`
rsp.data$detections$`A69-9004-489`[1:11, ]
rsp.data$track$`A69-9002-10474`
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9002-10474", track = 4)
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9002-10474", track = 5) +
addStations(input = rsp.data) # Adds the acoustic stations to the plot
rsp.data$track$`A69-9004-485`
recap # Recaptures on Track 3 and Track 6: First.time = Recapture.date
recap <- read.csv("recaptures.csv")
recap # Recaptures on Track 3 and Track 6: First.time = Recapture.date
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9004-485", track = 3) +
addStations(rsp.data) + addRecaptures(Signal = "485") # Also adds the recapture locations
dbbmm.daily <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, verbose = TRUE,
timeframe = 24, # Apply dBBMM according to 24h intervals
start.time = "2014-11-01 00:00:00", stop.time = "2014-11-05 00:00:00")
dbbmm.daily$timeslots    # Metadata on timeslots
dbbmm.daily$valid.tracks # Tracks are broken into periods with a maximum of 24h
plot1 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 1,
title = "Tag 485 (2014-11-01)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot2 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 2,
title = "Tag 485 (2014-11-02)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot3 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 3,
title = "Tag 485 (2014-11-03)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot4 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 4,
title = "Tag 485 (2014-11-04)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
(plot1 + plot2) / (plot3 + plot4)
View(dbbmm.daily)
dbbmm.daily$group.rasters$B$`1`$A69.9004.485_Track_06
dbbmm.daily$group.rasters$B$`1`$A69.9004.485_Track_06
plot(dbbmm.daily$group.rasters$B$`1`$A69.9004.485_Track_06)
areas.daily <- getAreas(dbbmm.daily, type = "group")
areas.daily$areas
plot1 <- plotAreas(areas.daily, base.raster = water, group = "A", timeslot = 1, land.col = "#55903b60",
title = "Group A (2014-11-01)")
plot2 <- plotAreas(areas.daily, base.raster = water, group = "B", timeslot = 1, land.col = "#55903b60",
title = "Group B (2014-11-01)")
plot1 + plot2
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B
plotAreas(areas.daily, base.raster = water, group = "B", timeslot = 1, title = "Group B (2014-11-01)") +
addCentroids(input = df.centroid.B, timeslot = 1)
gc()
dev.off()
plotAreas(areas.daily, base.raster = water, group = "B", timeslot = 1, title = "Group B (2014-11-02)") +
addCentroids(input = df.centroid.B, timeslot = 2)
plotAreas(areas.daily, base.raster = water, group = "B", timeslot = 2, title = "Group B (2014-11-02)") +
addCentroids(input = df.centroid.B, timeslot = 2)
areas.track <- getAreas(dbbmm.daily, type = "track")
areas.track$areas
df.centroid.track <- getCentroids(input = dbbmm.daily, areas = areas.track, type = "track", level = 0.5, UTM = 56)
df.centroid.track
over.daily <- getOverlaps(areas.daily)
over.daily$areas$`0.5`$percentage
plotOverlaps(over.daily, areas = areas.daily, base.raster = water, groups = c("A", "B"), land.col = "#55903b60",
level = 0.5, timeslot = 2, title = "Overlap at 50% dBBMM on 2014-11-02")
over.daily$areas$`0.5`$percentage
plotOverlaps(over.daily, areas = areas.daily, base.raster = water, groups = c("A", "B"), land.col = "#55903b60",
level = 0.5, timeslot = 4, title = "Overlap at 50% dBBMM on 2014-11-02")
plotOverlaps(over.daily, areas = areas.daily, base.raster = water, groups = c("A", "B"), land.col = "#55903b60",
level = 0.5, timeslot = 4, title = "Overlap at 50% dBBMM on 2014-11-04")
df.aux.5 <- getOverlapData(input = over.daily, dbbmm = dbbmm.daily, groups = c("A", "B"), level = 0.5)
df.aux.5
df.aux.95 <- getOverlapData(input = over.daily, dbbmm = dbbmm.daily, groups = c("A", "B"), level = 0.95)
df.aux.95
df.aux.5$Level <- "50%"
df.aux.95$Level <- "95%"
df.aux <- rbind(df.aux.5, df.aux.95)
df.aux
ggplot() + theme_bw() +
geom_line(data = df.aux, aes(x = start, y = Absolute_A_B, colour = Level)) +
labs(y = expression(paste("Absolute overlap betwwen A and B (m"^"2", ")")),
x = "Date")
ggplot() + theme_bw() +
geom_line(data = df.aux, aes(x = start, y = Percentage_A_B, colour = Level)) +
labs(y = "Percentage overlap between A and B (%)", x = "Date")
ggplot() + theme_bw() +
geom_line(data = df.aux, aes(x = start, y = Absolute_A_B, colour = Level)) +
labs(y = expression(paste("Absolute overlap betwwen A and B (m"^"2", ")")),
x = "Date")
df.aux
df.centroid.B
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
rsp.data$bio # Biometrics file
distance.data <- getDistances(rsp.data)
plotDistances(distance.data, group = "B", compare = FALSE) # Only RSP distances!
View(distance.data)
View(rsp.data$detections$`A69-9004-485`[90:150, ])
rsp.data <- runRSP(input = study.data, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude", verbose = TRUE,
recaptures = TRUE) # Adding recapture locations as input for RSP: default = FALSE!
rsp.data <- runRSP(input = study.data, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude", verbose = TRUE,
recaptures = TRUE) # Adding recapture locations as input for RSP: default = FALSE!
tl <- transitionLayer(water, directions = 8)
rsp.data <- runRSP(input = study.data, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude", verbose = TRUE,
recaptures = TRUE) # Adding recapture locations as input for RSP: default = FALSE!
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
# Create a transition layer with 8 directions (the default is 16)
tl <- transitionLayer(water, directions = 8)
plotRaster(input = study.data, base.raster = water, coord.x = "Longitude", coord.y = "Latitude")
recap <- read.csv("recaptures.csv")
View(recap)
View(recap)
library(RSP)
library(actel)
library(raster)
library(ggplot2)
library(patchwork)
library(ggsn)
library(cmocean)
study.data <- explore(tz = "Australia/NSW", inactive.error = 10, save.tables.locally = TRUE)
recap <- read.csv("recaptures.csv")
recap
View(recap)
plotRaster(input = study.data, base.raster = water, coord.x = "Longitude", coord.y = "Latitude")
water <- loadShape(shape = "Lake_Macquarie.shp", size = 0.0002, buffer = 0.05,
coord.x = "Longitude", coord.y = "Latitude")
plotRaster(input = study.data, base.raster = water, coord.x = "Longitude", coord.y = "Latitude")
recap <- read.csv("recaptures.csv")
recap
plotRaster(input = study.data, base.raster = water, coord.x = "Longitude", coord.y = "Latitude") +
addRecaptures(Signal = 485, fill = "forestgreen")
plotRaster(input = study.data, base.raster = water, coord.x = "Longitude", coord.y = "Latitude") +
addRecaptures(Signal = 485, fill = "green")
rsp.data <- runRSP(input = study.data, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude", verbose = TRUE,
recaptures = TRUE) # Adding recapture locations as input for RSP: default = FALSE!
tl <- transitionLayer(water, directions = 8)
rsp.data <- runRSP(input = study.data, t.layer = tl, coord.x = "Longitude", coord.y = "Latitude", verbose = TRUE,
recaptures = TRUE) # Adding recapture locations as input for RSP: default = FALSE!
load("rsp.data.Rdata") # Load RSP analysis because it takes a long time to run
rsp.data$bio # Biometrics file
View(recap)
distance.data <- getDistances(rsp.data)
plotDistances(distance.data, group = "A")
plotDistances(distance.data, group = "B", compare = FALSE) # Only RSP distances!
distance.data
names(rsp.data)
rsp.data$track$`A69-9004-481` # Some tracks were INVALID!
rsp.data$track$`A69-9004-489`
rsp.data$detections$`A69-9004-489`[1:11, ]
rsp.data$track$`A69-9002-10474`
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9002-10474", track = 4)
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9002-10474", track = 5) +
addStations(input = rsp.data) # Adds the acoustic stations to the plot
rsp.data$track$`A69-9004-485`
recap # Recaptures on Track 3 and Track 6: First.time = Recapture.date
plotTracks(input = rsp.data, base.raster = water, tag = "A69-9004-485", track = 3) +
addStations(rsp.data) + addRecaptures(Signal = "485") # Also adds the recapture locations
rsp.data$detections$`A69-9004-485`[90:150, ]
dbbmm.daily <- dynBBMM(input = rsp.data, base.raster = water, UTM = 56, verbose = TRUE,
timeframe = 24, # Apply dBBMM according to 24h intervals
start.time = "2014-11-01 00:00:00", stop.time = "2014-11-05 00:00:00")
plot1 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 1,
title = "Tag 485 (2014-11-01)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot2 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 2,
title = "Tag 485 (2014-11-02)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot3 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 3,
title = "Tag 485 (2014-11-03)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
plot4 <- plotContours(input = dbbmm.daily, tag = "A69-9004-485", timeslot = 4,
title = "Tag 485 (2014-11-04)", scale.type = "continuous") +
ggsn::scalebar(x.min = 151.5, x.max = 151.55, y.min = -32.95, y.max = -32.92, transform = TRUE,
dist_unit = "km", dist = 5, st.dist = 0.4, st.size = 3, height = 0.2, border.size = 0.5)
(plot1 + plot2) / (plot3 + plot4)
areas.daily <- getAreas(dbbmm.daily, type = "group")
df.centroid.B <- getCentroids(input = dbbmm.daily, areas = areas.daily, type = "group", level = 0.5, group = "B", UTM = 56)
df.centroid.B
areas.track <- getAreas(dbbmm.daily, type = "track")
areas.track$areas
df.centroid.track <- getCentroids(input = dbbmm.daily, areas = areas.track, type = "track", level = 0.5, UTM = 56)
df.centroid.track
